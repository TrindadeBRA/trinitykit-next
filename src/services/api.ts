/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * TrinityKitWP API
 * API para criar posts e fazer upload de imagens no WordPress
 * OpenAPI spec version: 1.0.0
 */
import type {
  GetConfigs200,
  GetConfigs401,
  GetPostSlugs200,
  GetPostSlugs401,
  GetProducts200,
  GetProducts401,
  GetSegmentSlug200,
  GetSegmentSlug401,
  GetSegmentSlug404,
  PostContactFormSubmit200,
  PostContactFormSubmit400,
  PostContactFormSubmit401,
  PostContactFormSubmit500,
  PostContactFormSubmitBody
} from './model';

/**
 * Retorna as configurações básicas do site WordPress
 * @summary Obter configurações do site
 */
export type getConfigsResponse200 = {
  data: GetConfigs200
  status: 200
}

export type getConfigsResponse401 = {
  data: GetConfigs401
  status: 401
}
    
export type getConfigsResponseComposite = getConfigsResponse200 | getConfigsResponse401;
    
export type getConfigsResponse = getConfigsResponseComposite & {
  headers: Headers;
}

export const getGetConfigsUrl = () => {


  

  return `/configs`
}

export const getConfigs = async ( options?: RequestInit): Promise<getConfigsResponse> => {
  
  const res = await fetch(getGetConfigsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getConfigsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getConfigsResponse
}



/**
 * Retorna uma lista de todos os produtos com suas taxonomias hierárquicas e campos personalizados
 * @summary Listar todos os produtos
 */
export type getProductsResponse200 = {
  data: GetProducts200
  status: 200
}

export type getProductsResponse401 = {
  data: GetProducts401
  status: 401
}
    
export type getProductsResponseComposite = getProductsResponse200 | getProductsResponse401;
    
export type getProductsResponse = getProductsResponseComposite & {
  headers: Headers;
}

export const getGetProductsUrl = () => {


  

  return `/products`
}

export const getProducts = async ( options?: RequestInit): Promise<getProductsResponse> => {
  
  const res = await fetch(getGetProductsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getProductsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getProductsResponse
}



/**
 * Retorna uma lista de produtos filtrados por um segmento específico
 * @summary Listar produtos por segmento
 */
export type getSegmentSlugResponse200 = {
  data: GetSegmentSlug200
  status: 200
}

export type getSegmentSlugResponse401 = {
  data: GetSegmentSlug401
  status: 401
}

export type getSegmentSlugResponse404 = {
  data: GetSegmentSlug404
  status: 404
}
    
export type getSegmentSlugResponseComposite = getSegmentSlugResponse200 | getSegmentSlugResponse401 | getSegmentSlugResponse404;
    
export type getSegmentSlugResponse = getSegmentSlugResponseComposite & {
  headers: Headers;
}

export const getGetSegmentSlugUrl = (slug: string,) => {


  

  return `/segment/${slug}`
}

export const getSegmentSlug = async (slug: string, options?: RequestInit): Promise<getSegmentSlugResponse> => {
  
  const res = await fetch(getGetSegmentSlugUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSegmentSlugResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSegmentSlugResponse
}



/**
 * Cria um novo registro de contato no WordPress
 * @summary Enviar formulário de contato
 */
export type postContactFormSubmitResponse200 = {
  data: PostContactFormSubmit200
  status: 200
}

export type postContactFormSubmitResponse400 = {
  data: PostContactFormSubmit400
  status: 400
}

export type postContactFormSubmitResponse401 = {
  data: PostContactFormSubmit401
  status: 401
}

export type postContactFormSubmitResponse500 = {
  data: PostContactFormSubmit500
  status: 500
}
    
export type postContactFormSubmitResponseComposite = postContactFormSubmitResponse200 | postContactFormSubmitResponse400 | postContactFormSubmitResponse401 | postContactFormSubmitResponse500;
    
export type postContactFormSubmitResponse = postContactFormSubmitResponseComposite & {
  headers: Headers;
}

export const getPostContactFormSubmitUrl = () => {


  

  return `/contact-form/submit`
}

export const postContactFormSubmit = async (postContactFormSubmitBody: PostContactFormSubmitBody, options?: RequestInit): Promise<postContactFormSubmitResponse> => {
  
  const res = await fetch(getPostContactFormSubmitUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postContactFormSubmitBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postContactFormSubmitResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postContactFormSubmitResponse
}



/**
 * Retorna uma lista de todos os slugs dos posts publicados.
 * @summary Listar todos os slugs dos posts
 */
export type getPostSlugsResponse200 = {
  data: GetPostSlugs200
  status: 200
}

export type getPostSlugsResponse401 = {
  data: GetPostSlugs401
  status: 401
}
    
export type getPostSlugsResponseComposite = getPostSlugsResponse200 | getPostSlugsResponse401;
    
export type getPostSlugsResponse = getPostSlugsResponseComposite & {
  headers: Headers;
}

export const getGetPostSlugsUrl = () => {


  

  return `/post-slugs`
}

export const getPostSlugs = async ( options?: RequestInit): Promise<getPostSlugsResponse> => {
  
  const res = await fetch(getGetPostSlugsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPostSlugsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getPostSlugsResponse
}
